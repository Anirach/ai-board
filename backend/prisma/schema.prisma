// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  boards       Board[]
  conversations Conversation[]
  messages     Message[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId       String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardPersonas BoardPersona[]
  conversations Conversation[]

  @@map("boards")
}

model Persona {
  id          String   @id @default(cuid())
  name        String   @unique
  role        String
  expertise   String // JSON array as string
  mindset     String
  personality String
  description String
  avatar      String?
  isPreset    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  boardPersonas BoardPersona[]
  messages     Message[]

  @@map("personas")
}

model BoardPersona {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  boardId   String
  personaId String
  board     Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  persona   Persona @relation(fields: [personaId], references: [id], onDelete: Cascade)

  @@unique([boardId, personaId])
  @@map("board_personas")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  context   String? // Business context/scenario
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  boardId  String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  board    Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String // "USER", "PERSONA", "SYSTEM"
  createdAt DateTime @default(now())

  // Relations
  conversationId String
  userId         String?
  personaId      String?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  persona        Persona?     @relation(fields: [personaId], references: [id], onDelete: SetNull)

  @@map("messages")
}